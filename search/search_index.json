{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 CRIPT (the Community Resource for Innovation in Polymer Technology ) is a web-based platform for capturing and sharing polymer data. In addition to a user interface, CRIPT enables programmatic access to the platform through the CRIPT Python SDK, which interfaces with a REST API. This documentation shows how to quickly get started with the SDK, describes the various Python methods for interacting with the API , and provides definitions and source code for Nodes and Subobjects from the CRIPT Data Model.","title":"Home"},{"location":"#home","text":"CRIPT (the Community Resource for Innovation in Polymer Technology ) is a web-based platform for capturing and sharing polymer data. In addition to a user interface, CRIPT enables programmatic access to the platform through the CRIPT Python SDK, which interfaces with a REST API. This documentation shows how to quickly get started with the SDK, describes the various Python methods for interacting with the API , and provides definitions and source code for Nodes and Subobjects from the CRIPT Data Model.","title":"Home"},{"location":"api/","text":"API \u00b6 The entry point for interacting with the CRIPT REST API. Parameters: Name Type Description Default host str The hostname of the relevant CRIPT instance. (e.g., criptapp.org) None token str The API token used for authentication. None tls bool Indicates whether to use TLS encryption for the API connection. True APILocal \u00b6 The entry point for interacting with your local filesystem. Parameters: Name Type Description Default folder Union [ str , pathlib . Path ] Path to a folder on your local filesystem. required","title":"API"},{"location":"api/#api","text":"The entry point for interacting with the CRIPT REST API. Parameters: Name Type Description Default host str The hostname of the relevant CRIPT instance. (e.g., criptapp.org) None token str The API token used for authentication. None tls bool Indicates whether to use TLS encryption for the API connection. True","title":"API"},{"location":"api/#apilocal","text":"The entry point for interacting with your local filesystem. Parameters: Name Type Description Default folder Union [ str , pathlib . Path ] Path to a folder on your local filesystem. required","title":"APILocal"},{"location":"exceptions/","text":"CRIPTError \u00b6 Base CRIPT exception. AddNodeError \u00b6 Raised when an attempt is made to add an unrelated node. e.g., Attempting to add a Condition node to a Collection node. FileSizeLimitError \u00b6 Raised when a file size exceeds the defined limit. InvalidPage \u00b6 Raised when attempting to get an invalid page via a paginator. RemoveNodeError \u00b6 Raised when an attempt is made to remove an unrelated node. e.g., Attempting to remove a Condition node from a Collection node. UniqueNodeError \u00b6 Raised when a node is saved using a combination of field values that the database enforces as a unique set. UnsavedNodeError \u00b6 Raised when an attempt is made to add an unsaved node to another node. APIError \u00b6 Base CRIPT API exception. APISessionRequiredError \u00b6 Raised when an active API session is required but not yet established. FileDownloadError \u00b6 Raised when a file download fails. FileUploadError \u00b6 Raised when a file upload fails. InvalidAuthCode \u00b6 Raised when an Authentication code to connect to a storage client is invalid","title":"Exceptions"},{"location":"exceptions/#cript.exceptions.CRIPTError","text":"Base CRIPT exception.","title":"CRIPTError"},{"location":"exceptions/#cript.data_model.exceptions.AddNodeError","text":"Raised when an attempt is made to add an unrelated node. e.g., Attempting to add a Condition node to a Collection node.","title":"AddNodeError"},{"location":"exceptions/#cript.data_model.exceptions.FileSizeLimitError","text":"Raised when a file size exceeds the defined limit.","title":"FileSizeLimitError"},{"location":"exceptions/#cript.data_model.exceptions.InvalidPage","text":"Raised when attempting to get an invalid page via a paginator.","title":"InvalidPage"},{"location":"exceptions/#cript.data_model.exceptions.RemoveNodeError","text":"Raised when an attempt is made to remove an unrelated node. e.g., Attempting to remove a Condition node from a Collection node.","title":"RemoveNodeError"},{"location":"exceptions/#cript.data_model.exceptions.UniqueNodeError","text":"Raised when a node is saved using a combination of field values that the database enforces as a unique set.","title":"UniqueNodeError"},{"location":"exceptions/#cript.data_model.exceptions.UnsavedNodeError","text":"Raised when an attempt is made to add an unsaved node to another node.","title":"UnsavedNodeError"},{"location":"exceptions/#cript.api.exceptions.APIError","text":"Base CRIPT API exception.","title":"APIError"},{"location":"exceptions/#cript.api.exceptions.APISessionRequiredError","text":"Raised when an active API session is required but not yet established.","title":"APISessionRequiredError"},{"location":"exceptions/#cript.storage_clients.exceptions.FileDownloadError","text":"Raised when a file download fails.","title":"FileDownloadError"},{"location":"exceptions/#cript.storage_clients.exceptions.FileUploadError","text":"Raised when a file upload fails.","title":"FileUploadError"},{"location":"exceptions/#cript.storage_clients.exceptions.InvalidAuthCode","text":"Raised when an Authentication code to connect to a storage client is invalid","title":"InvalidAuthCode"},{"location":"paginator/","text":"Paginator for object lists and raw JSON. Parameters: Name Type Description Default url str Query URL required node_name str Name of the relevant node required payload Union [ str , None] POST request payload None limit Union [ int , None] The max number of items per page. None offset Union [ int , None] The starting position of the paginator. None get_level int Level to recursively get nested nodes. 1 count () \u00b6 Get the total number of objects. json () \u00b6 Get the raw JSON. next_page () \u00b6 Flip to the next page. objects () \u00b6 Use the current raw JSON to generate a list of objects. previous_page () \u00b6 Flip to the previous page.","title":"Paginator"},{"location":"paginator/#cript.data_model.paginator.Paginator.count","text":"Get the total number of objects.","title":"count()"},{"location":"paginator/#cript.data_model.paginator.Paginator.json","text":"Get the raw JSON.","title":"json()"},{"location":"paginator/#cript.data_model.paginator.Paginator.next_page","text":"Flip to the next page.","title":"next_page()"},{"location":"paginator/#cript.data_model.paginator.Paginator.objects","text":"Use the current raw JSON to generate a list of objects.","title":"objects()"},{"location":"paginator/#cript.data_model.paginator.Paginator.previous_page","text":"Flip to the previous page.","title":"previous_page()"},{"location":"quickstart/","text":"Installation \u00b6 Prerequisites: Python 3.9+ Internet access Install with pip: pip install cript Connect to CRIPT \u00b6 Establish a connection with an API endpoint: import cript host = \"<endpoint_hostname>\" # e.g., criptapp.org token = \"<your_api_token>\" cript . API ( host , token ) Note Your API token can be found in the UI under Account Settings. Example Tasks \u00b6 Create a node \u00b6 For example, create a Project: proj = cript . Project ( name = \"MyProject\" ) proj . save () ... then a Collection: coll = cript . Collection . create ( project = proj , name = \"MyCollection\" ) Note Notice the use of create() here, which instantiates and saves the object in one go. Update a node \u00b6 For example, update the Project node created above: proj . name = \"OurProject\" proj . save () ... then the Collection: coll . update ( name = \"OurCollection\" ) Note Notice the use of update() here, which updates and saves a node in one go. Delete a node \u00b6 For example, delete the Collection node created above: coll . delete () Get an existing node \u00b6 For example, get the official CRIPT Project node: proj = cript . Project . get ( name = \"CRIPT\" ) ... then get the official styrene Material node via name: styrene = cript . Material . get ( project = proj . uid , name = \"Styrene\" ) ... or via UID styrene = cript . Material . get ( uid = \"<material_uid>\" ) ... or via URL styrene = cript . Material . get ( url = \"<material_url>\" ) Run a search query \u00b6 For example, search for Material nodes with a molar mass less than 10 g/mol: res = cript . Material . search ( properties = [ { \"key\" : \"molar_mass\" , \"value__lt\" : 10 , \"unit\" : \"g/mol\" } ] ) ... then paginate through the results. res . json () # View the raw JSON for the query res . objects () # Generate objects for the current page res . next_page () # Flip to the next page res . previous_page () # Flip to the previous page Upload a file \u00b6 First, you'll need a Project and Data node: proj = cript . Project . get ( uid = \"<project_uid>\" ) data = cript . Data . get ( uid = \"<data_uid>\" ) Next, create a File node that points to your local file: path = \"path/to/local/file\" f = cript . File ( project = proj , source = path ) file . save () Download a file \u00b6 For example, download the file you uploaded above. path = \"path/to/local/file\" f . download_file ( path = path ) Note The default path for a download is your current directory.","title":"Quickstart"},{"location":"quickstart/#installation","text":"Prerequisites: Python 3.9+ Internet access Install with pip: pip install cript","title":"Installation"},{"location":"quickstart/#connect-to-cript","text":"Establish a connection with an API endpoint: import cript host = \"<endpoint_hostname>\" # e.g., criptapp.org token = \"<your_api_token>\" cript . API ( host , token ) Note Your API token can be found in the UI under Account Settings.","title":"Connect to CRIPT"},{"location":"quickstart/#example-tasks","text":"","title":"Example Tasks"},{"location":"quickstart/#create-a-node","text":"For example, create a Project: proj = cript . Project ( name = \"MyProject\" ) proj . save () ... then a Collection: coll = cript . Collection . create ( project = proj , name = \"MyCollection\" ) Note Notice the use of create() here, which instantiates and saves the object in one go.","title":"Create a node"},{"location":"quickstart/#update-a-node","text":"For example, update the Project node created above: proj . name = \"OurProject\" proj . save () ... then the Collection: coll . update ( name = \"OurCollection\" ) Note Notice the use of update() here, which updates and saves a node in one go.","title":"Update a node"},{"location":"quickstart/#delete-a-node","text":"For example, delete the Collection node created above: coll . delete ()","title":"Delete a node"},{"location":"quickstart/#get-an-existing-node","text":"For example, get the official CRIPT Project node: proj = cript . Project . get ( name = \"CRIPT\" ) ... then get the official styrene Material node via name: styrene = cript . Material . get ( project = proj . uid , name = \"Styrene\" ) ... or via UID styrene = cript . Material . get ( uid = \"<material_uid>\" ) ... or via URL styrene = cript . Material . get ( url = \"<material_url>\" )","title":"Get an existing node"},{"location":"quickstart/#run-a-search-query","text":"For example, search for Material nodes with a molar mass less than 10 g/mol: res = cript . Material . search ( properties = [ { \"key\" : \"molar_mass\" , \"value__lt\" : 10 , \"unit\" : \"g/mol\" } ] ) ... then paginate through the results. res . json () # View the raw JSON for the query res . objects () # Generate objects for the current page res . next_page () # Flip to the next page res . previous_page () # Flip to the previous page","title":"Run a search query"},{"location":"quickstart/#upload-a-file","text":"First, you'll need a Project and Data node: proj = cript . Project . get ( uid = \"<project_uid>\" ) data = cript . Data . get ( uid = \"<data_uid>\" ) Next, create a File node that points to your local file: path = \"path/to/local/file\" f = cript . File ( project = proj , source = path ) file . save ()","title":"Upload a file"},{"location":"quickstart/#download-a-file","text":"For example, download the file you uploaded above. path = \"path/to/local/file\" f . download_file ( path = path ) Note The default path for a download is your current directory.","title":"Download a file"},{"location":"data_model/nodes/","text":"Nodes \u00b6 Project \u00b6 Object representing a logical grouping of Material , File , and Collection objects. Collection \u00b6 Object representing a logical grouping of Experiment and Inventory objects. Experiment \u00b6 Object representing an experiment. Inventory \u00b6 Object representing a logical grouping of Material objects. __getitem__ ( obj ) \u00b6 obj can be an index or slice of self.materials or a unique identifier of a material Data \u00b6 Object representing a set of File objects and related meta-data. File \u00b6 Object representing a single raw data file. download_file ( path = None , api = None ) \u00b6 Download a file from the defined storage provider. Parameters: Name Type Description Default path str Path where the file should go. None Process \u00b6 Object representing a process of creating or transforming a Material object. ComputationalProcess \u00b6 Object representing a simulation that processes or changes a virtual Material . Computation \u00b6 Object representing the transformation of data or the creation of a computational data set Material \u00b6 Object representing a material, mixture or compound. Reference \u00b6 Object representing a bibliographic resource. save ( get_level = 1 , update_existing = False ) \u00b6 Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False Software \u00b6 Object representing a computation tool, code, programing language, or software package. User \u00b6 Object representing a CRIPT user. Note: A user cannot be created or modified using the SDK. This object is for read-only purposes only. Group \u00b6 Object representing a CRIPT group.","title":"Nodes"},{"location":"data_model/nodes/#nodes","text":"","title":"Nodes"},{"location":"data_model/nodes/#project","text":"Object representing a logical grouping of Material , File , and Collection objects.","title":"Project"},{"location":"data_model/nodes/#collection","text":"Object representing a logical grouping of Experiment and Inventory objects.","title":"Collection"},{"location":"data_model/nodes/#experiment","text":"Object representing an experiment.","title":"Experiment"},{"location":"data_model/nodes/#inventory","text":"Object representing a logical grouping of Material objects.","title":"Inventory"},{"location":"data_model/nodes/#cript.data_model.nodes.inventory.Inventory.__getitem__","text":"obj can be an index or slice of self.materials or a unique identifier of a material","title":"__getitem__()"},{"location":"data_model/nodes/#data","text":"Object representing a set of File objects and related meta-data.","title":"Data"},{"location":"data_model/nodes/#file","text":"Object representing a single raw data file.","title":"File"},{"location":"data_model/nodes/#cript.data_model.nodes.file.File.download_file","text":"Download a file from the defined storage provider. Parameters: Name Type Description Default path str Path where the file should go. None","title":"download_file()"},{"location":"data_model/nodes/#process","text":"Object representing a process of creating or transforming a Material object.","title":"Process"},{"location":"data_model/nodes/#computationalprocess","text":"Object representing a simulation that processes or changes a virtual Material .","title":"ComputationalProcess"},{"location":"data_model/nodes/#computation","text":"Object representing the transformation of data or the creation of a computational data set","title":"Computation"},{"location":"data_model/nodes/#material","text":"Object representing a material, mixture or compound.","title":"Material"},{"location":"data_model/nodes/#reference","text":"Object representing a bibliographic resource.","title":"Reference"},{"location":"data_model/nodes/#cript.data_model.nodes.reference.Reference.save","text":"Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False","title":"save()"},{"location":"data_model/nodes/#software","text":"Object representing a computation tool, code, programing language, or software package.","title":"Software"},{"location":"data_model/nodes/#user","text":"Object representing a CRIPT user. Note: A user cannot be created or modified using the SDK. This object is for read-only purposes only.","title":"User"},{"location":"data_model/nodes/#group","text":"Object representing a CRIPT group.","title":"Group"},{"location":"data_model/subobjects/","text":"Subobjects \u00b6 Property \u00b6 Object representing an observed or measured attribute of a Material or Process object. Condition \u00b6 Object representing a condition (e.g., temperature). These are used as modifiers for Property and Process objects. Identifier \u00b6 Object representing an identifier of a Material object (e.g., CAS, BigSMILES). Ingredient \u00b6 Object representing a Material object being used as an input to a Process object. Quantity \u00b6 Object representing a specified amount of an Ingredient object used as input to a Process object. Equipment \u00b6 Object representing equipment used in a Process . ComputationalForcefield \u00b6 Object representing the computational forcefield of a virtual Material . SoftwareConfiguration \u00b6 Object representing the Software and set of Algorithm objects used to execute a Computation or ComputationalProcess . Algorithm \u00b6 Object that represents an algorithm used in :class: Computation and ComputationalProcess objects. Parameter \u00b6 Object representing a an input value to an :class: Algorithm . Citation \u00b6 Object representing how a Reference object is applied in a given context.","title":"Subobjects"},{"location":"data_model/subobjects/#subobjects","text":"","title":"Subobjects"},{"location":"data_model/subobjects/#property","text":"Object representing an observed or measured attribute of a Material or Process object.","title":"Property"},{"location":"data_model/subobjects/#condition","text":"Object representing a condition (e.g., temperature). These are used as modifiers for Property and Process objects.","title":"Condition"},{"location":"data_model/subobjects/#identifier","text":"Object representing an identifier of a Material object (e.g., CAS, BigSMILES).","title":"Identifier"},{"location":"data_model/subobjects/#ingredient","text":"Object representing a Material object being used as an input to a Process object.","title":"Ingredient"},{"location":"data_model/subobjects/#quantity","text":"Object representing a specified amount of an Ingredient object used as input to a Process object.","title":"Quantity"},{"location":"data_model/subobjects/#equipment","text":"Object representing equipment used in a Process .","title":"Equipment"},{"location":"data_model/subobjects/#computationalforcefield","text":"Object representing the computational forcefield of a virtual Material .","title":"ComputationalForcefield"},{"location":"data_model/subobjects/#softwareconfiguration","text":"Object representing the Software and set of Algorithm objects used to execute a Computation or ComputationalProcess .","title":"SoftwareConfiguration"},{"location":"data_model/subobjects/#algorithm","text":"Object that represents an algorithm used in :class: Computation and ComputationalProcess objects.","title":"Algorithm"},{"location":"data_model/subobjects/#parameter","text":"Object representing a an input value to an :class: Algorithm .","title":"Parameter"},{"location":"data_model/subobjects/#citation","text":"Object representing how a Reference object is applied in a given context.","title":"Citation"},{"location":"nodes/collection/","text":"Collection \u00b6 Object representing a logical grouping of Experiment and Inventory objects. save ( get_level = 1 , update_existing = False ) \u00b6 Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False delete () \u00b6 Delete a node in the database and clear it locally. refresh ( get_level = 1 ) \u00b6 Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update ( get_level = 1 , ** kwargs ) \u00b6 Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {} create ( get_level = 1 , update_existing = False , ** kwargs ) classmethod \u00b6 Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node. get ( get_level = 1 , ** kwargs ) classmethod \u00b6 Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object. search ( limit = None , offset = None , get_level = 1 , ** kwargs ) classmethod \u00b6 Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"Collection"},{"location":"nodes/collection/#collection","text":"Object representing a logical grouping of Experiment and Inventory objects.","title":"Collection"},{"location":"nodes/collection/#cript.data_model.nodes.base_node.BaseNode.save","text":"Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False","title":"save()"},{"location":"nodes/collection/#cript.data_model.nodes.base_node.BaseNode.delete","text":"Delete a node in the database and clear it locally.","title":"delete()"},{"location":"nodes/collection/#cript.data_model.nodes.base_node.BaseNode.refresh","text":"Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1","title":"refresh()"},{"location":"nodes/collection/#cript.data_model.nodes.base_node.BaseNode.update","text":"Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {}","title":"update()"},{"location":"nodes/collection/#cript.data_model.nodes.base_node.BaseNode.create","text":"Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node.","title":"create()"},{"location":"nodes/collection/#cript.data_model.nodes.base_node.BaseNode.get","text":"Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object.","title":"get()"},{"location":"nodes/collection/#cript.data_model.nodes.base_node.BaseNode.search","text":"Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"search()"},{"location":"nodes/computation/","text":"Computation \u00b6 Object representing the transformation of data or the creation of a computational data set save ( get_level = 1 , update_existing = False ) \u00b6 Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False delete () \u00b6 Delete a node in the database and clear it locally. refresh ( get_level = 1 ) \u00b6 Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update ( get_level = 1 , ** kwargs ) \u00b6 Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {} create ( get_level = 1 , update_existing = False , ** kwargs ) classmethod \u00b6 Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node. get ( get_level = 1 , ** kwargs ) classmethod \u00b6 Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object. search ( limit = None , offset = None , get_level = 1 , ** kwargs ) classmethod \u00b6 Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"Computation"},{"location":"nodes/computation/#computation","text":"Object representing the transformation of data or the creation of a computational data set","title":"Computation"},{"location":"nodes/computation/#cript.data_model.nodes.base_node.BaseNode.save","text":"Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False","title":"save()"},{"location":"nodes/computation/#cript.data_model.nodes.base_node.BaseNode.delete","text":"Delete a node in the database and clear it locally.","title":"delete()"},{"location":"nodes/computation/#cript.data_model.nodes.base_node.BaseNode.refresh","text":"Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1","title":"refresh()"},{"location":"nodes/computation/#cript.data_model.nodes.base_node.BaseNode.update","text":"Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {}","title":"update()"},{"location":"nodes/computation/#cript.data_model.nodes.base_node.BaseNode.create","text":"Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node.","title":"create()"},{"location":"nodes/computation/#cript.data_model.nodes.base_node.BaseNode.get","text":"Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object.","title":"get()"},{"location":"nodes/computation/#cript.data_model.nodes.base_node.BaseNode.search","text":"Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"search()"},{"location":"nodes/computational_process/","text":"ComputationalProcess \u00b6 Object representing a simulation that processes or changes a virtual Material . save ( get_level = 1 , update_existing = False ) \u00b6 Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False delete () \u00b6 Delete a node in the database and clear it locally. refresh ( get_level = 1 ) \u00b6 Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update ( get_level = 1 , ** kwargs ) \u00b6 Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {} create ( get_level = 1 , update_existing = False , ** kwargs ) classmethod \u00b6 Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node. get ( get_level = 1 , ** kwargs ) classmethod \u00b6 Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object. search ( limit = None , offset = None , get_level = 1 , ** kwargs ) classmethod \u00b6 Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"ComputationalProcess"},{"location":"nodes/computational_process/#computationalprocess","text":"Object representing a simulation that processes or changes a virtual Material .","title":"ComputationalProcess"},{"location":"nodes/computational_process/#cript.data_model.nodes.base_node.BaseNode.save","text":"Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False","title":"save()"},{"location":"nodes/computational_process/#cript.data_model.nodes.base_node.BaseNode.delete","text":"Delete a node in the database and clear it locally.","title":"delete()"},{"location":"nodes/computational_process/#cript.data_model.nodes.base_node.BaseNode.refresh","text":"Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1","title":"refresh()"},{"location":"nodes/computational_process/#cript.data_model.nodes.base_node.BaseNode.update","text":"Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {}","title":"update()"},{"location":"nodes/computational_process/#cript.data_model.nodes.base_node.BaseNode.create","text":"Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node.","title":"create()"},{"location":"nodes/computational_process/#cript.data_model.nodes.base_node.BaseNode.get","text":"Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object.","title":"get()"},{"location":"nodes/computational_process/#cript.data_model.nodes.base_node.BaseNode.search","text":"Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"search()"},{"location":"nodes/data/","text":"Data \u00b6 Object representing a set of File objects and related meta-data. save ( get_level = 1 , update_existing = False ) \u00b6 Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False delete () \u00b6 Delete a node in the database and clear it locally. refresh ( get_level = 1 ) \u00b6 Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update ( get_level = 1 , ** kwargs ) \u00b6 Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {} create ( get_level = 1 , update_existing = False , ** kwargs ) classmethod \u00b6 Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node. get ( get_level = 1 , ** kwargs ) classmethod \u00b6 Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object. search ( limit = None , offset = None , get_level = 1 , ** kwargs ) classmethod \u00b6 Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"Data"},{"location":"nodes/data/#data","text":"Object representing a set of File objects and related meta-data.","title":"Data"},{"location":"nodes/data/#cript.data_model.nodes.base_node.BaseNode.save","text":"Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False","title":"save()"},{"location":"nodes/data/#cript.data_model.nodes.base_node.BaseNode.delete","text":"Delete a node in the database and clear it locally.","title":"delete()"},{"location":"nodes/data/#cript.data_model.nodes.base_node.BaseNode.refresh","text":"Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1","title":"refresh()"},{"location":"nodes/data/#cript.data_model.nodes.base_node.BaseNode.update","text":"Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {}","title":"update()"},{"location":"nodes/data/#cript.data_model.nodes.base_node.BaseNode.create","text":"Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node.","title":"create()"},{"location":"nodes/data/#cript.data_model.nodes.base_node.BaseNode.get","text":"Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object.","title":"get()"},{"location":"nodes/data/#cript.data_model.nodes.base_node.BaseNode.search","text":"Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"search()"},{"location":"nodes/experiment/","text":"Experiment \u00b6 Object representing an experiment. save ( get_level = 1 , update_existing = False ) \u00b6 Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False delete () \u00b6 Delete a node in the database and clear it locally. refresh ( get_level = 1 ) \u00b6 Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update ( get_level = 1 , ** kwargs ) \u00b6 Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {} create ( get_level = 1 , update_existing = False , ** kwargs ) classmethod \u00b6 Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node. get ( get_level = 1 , ** kwargs ) classmethod \u00b6 Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object. search ( limit = None , offset = None , get_level = 1 , ** kwargs ) classmethod \u00b6 Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"Experiment"},{"location":"nodes/experiment/#experiment","text":"Object representing an experiment.","title":"Experiment"},{"location":"nodes/experiment/#cript.data_model.nodes.base_node.BaseNode.save","text":"Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False","title":"save()"},{"location":"nodes/experiment/#cript.data_model.nodes.base_node.BaseNode.delete","text":"Delete a node in the database and clear it locally.","title":"delete()"},{"location":"nodes/experiment/#cript.data_model.nodes.base_node.BaseNode.refresh","text":"Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1","title":"refresh()"},{"location":"nodes/experiment/#cript.data_model.nodes.base_node.BaseNode.update","text":"Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {}","title":"update()"},{"location":"nodes/experiment/#cript.data_model.nodes.base_node.BaseNode.create","text":"Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node.","title":"create()"},{"location":"nodes/experiment/#cript.data_model.nodes.base_node.BaseNode.get","text":"Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object.","title":"get()"},{"location":"nodes/experiment/#cript.data_model.nodes.base_node.BaseNode.search","text":"Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"search()"},{"location":"nodes/file/","text":"File \u00b6 Object representing a single raw data file. download_file ( path = None , api = None ) \u00b6 Download a file from the defined storage provider. Parameters: Name Type Description Default path str Path where the file should go. None save ( get_level = 1 , update_existing = False ) \u00b6 Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False delete () \u00b6 Delete a node in the database and clear it locally. refresh ( get_level = 1 ) \u00b6 Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update ( get_level = 1 , ** kwargs ) \u00b6 Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {} create ( get_level = 1 , update_existing = False , ** kwargs ) classmethod \u00b6 Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node. get ( get_level = 1 , ** kwargs ) classmethod \u00b6 Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object. search ( limit = None , offset = None , get_level = 1 , ** kwargs ) classmethod \u00b6 Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"File"},{"location":"nodes/file/#file","text":"Object representing a single raw data file.","title":"File"},{"location":"nodes/file/#cript.data_model.nodes.file.File.download_file","text":"Download a file from the defined storage provider. Parameters: Name Type Description Default path str Path where the file should go. None","title":"download_file()"},{"location":"nodes/file/#cript.data_model.nodes.base_node.BaseNode.save","text":"Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False","title":"save()"},{"location":"nodes/file/#cript.data_model.nodes.base_node.BaseNode.delete","text":"Delete a node in the database and clear it locally.","title":"delete()"},{"location":"nodes/file/#cript.data_model.nodes.base_node.BaseNode.refresh","text":"Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1","title":"refresh()"},{"location":"nodes/file/#cript.data_model.nodes.base_node.BaseNode.update","text":"Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {}","title":"update()"},{"location":"nodes/file/#cript.data_model.nodes.base_node.BaseNode.create","text":"Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node.","title":"create()"},{"location":"nodes/file/#cript.data_model.nodes.base_node.BaseNode.get","text":"Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object.","title":"get()"},{"location":"nodes/file/#cript.data_model.nodes.base_node.BaseNode.search","text":"Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"search()"},{"location":"nodes/group/","text":"Group \u00b6 Object representing a CRIPT group. save ( get_level = 1 , update_existing = False ) \u00b6 Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False delete () \u00b6 Delete a node in the database and clear it locally. refresh ( get_level = 1 ) \u00b6 Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update ( get_level = 1 , ** kwargs ) \u00b6 Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {} create ( get_level = 1 , update_existing = False , ** kwargs ) classmethod \u00b6 Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node. get ( get_level = 1 , ** kwargs ) classmethod \u00b6 Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object. search ( limit = None , offset = None , get_level = 1 , ** kwargs ) classmethod \u00b6 Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"Group"},{"location":"nodes/group/#group","text":"Object representing a CRIPT group.","title":"Group"},{"location":"nodes/group/#cript.data_model.nodes.base_node.BaseNode.save","text":"Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False","title":"save()"},{"location":"nodes/group/#cript.data_model.nodes.base_node.BaseNode.delete","text":"Delete a node in the database and clear it locally.","title":"delete()"},{"location":"nodes/group/#cript.data_model.nodes.base_node.BaseNode.refresh","text":"Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1","title":"refresh()"},{"location":"nodes/group/#cript.data_model.nodes.base_node.BaseNode.update","text":"Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {}","title":"update()"},{"location":"nodes/group/#cript.data_model.nodes.base_node.BaseNode.create","text":"Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node.","title":"create()"},{"location":"nodes/group/#cript.data_model.nodes.base_node.BaseNode.get","text":"Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object.","title":"get()"},{"location":"nodes/group/#cript.data_model.nodes.base_node.BaseNode.search","text":"Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"search()"},{"location":"nodes/inventory/","text":"Inventory \u00b6 Object representing a logical grouping of Material objects. __getitem__ ( obj ) \u00b6 obj can be an index or slice of self.materials or a unique identifier of a material save ( get_level = 1 , update_existing = False ) \u00b6 Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False delete () \u00b6 Delete a node in the database and clear it locally. refresh ( get_level = 1 ) \u00b6 Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update ( get_level = 1 , ** kwargs ) \u00b6 Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {} create ( get_level = 1 , update_existing = False , ** kwargs ) classmethod \u00b6 Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node. get ( get_level = 1 , ** kwargs ) classmethod \u00b6 Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object. search ( limit = None , offset = None , get_level = 1 , ** kwargs ) classmethod \u00b6 Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"Inventory"},{"location":"nodes/inventory/#inventory","text":"Object representing a logical grouping of Material objects.","title":"Inventory"},{"location":"nodes/inventory/#cript.data_model.nodes.inventory.Inventory.__getitem__","text":"obj can be an index or slice of self.materials or a unique identifier of a material","title":"__getitem__()"},{"location":"nodes/inventory/#cript.data_model.nodes.base_node.BaseNode.save","text":"Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False","title":"save()"},{"location":"nodes/inventory/#cript.data_model.nodes.base_node.BaseNode.delete","text":"Delete a node in the database and clear it locally.","title":"delete()"},{"location":"nodes/inventory/#cript.data_model.nodes.base_node.BaseNode.refresh","text":"Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1","title":"refresh()"},{"location":"nodes/inventory/#cript.data_model.nodes.base_node.BaseNode.update","text":"Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {}","title":"update()"},{"location":"nodes/inventory/#cript.data_model.nodes.base_node.BaseNode.create","text":"Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node.","title":"create()"},{"location":"nodes/inventory/#cript.data_model.nodes.base_node.BaseNode.get","text":"Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object.","title":"get()"},{"location":"nodes/inventory/#cript.data_model.nodes.base_node.BaseNode.search","text":"Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"search()"},{"location":"nodes/material/","text":"Material \u00b6 Object representing a material, mixture or compound. save ( get_level = 1 , update_existing = False ) \u00b6 Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False delete () \u00b6 Delete a node in the database and clear it locally. refresh ( get_level = 1 ) \u00b6 Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update ( get_level = 1 , ** kwargs ) \u00b6 Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {} create ( get_level = 1 , update_existing = False , ** kwargs ) classmethod \u00b6 Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node. get ( get_level = 1 , ** kwargs ) classmethod \u00b6 Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object. search ( limit = None , offset = None , get_level = 1 , ** kwargs ) classmethod \u00b6 Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"Material"},{"location":"nodes/material/#material","text":"Object representing a material, mixture or compound.","title":"Material"},{"location":"nodes/material/#cript.data_model.nodes.base_node.BaseNode.save","text":"Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False","title":"save()"},{"location":"nodes/material/#cript.data_model.nodes.base_node.BaseNode.delete","text":"Delete a node in the database and clear it locally.","title":"delete()"},{"location":"nodes/material/#cript.data_model.nodes.base_node.BaseNode.refresh","text":"Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1","title":"refresh()"},{"location":"nodes/material/#cript.data_model.nodes.base_node.BaseNode.update","text":"Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {}","title":"update()"},{"location":"nodes/material/#cript.data_model.nodes.base_node.BaseNode.create","text":"Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node.","title":"create()"},{"location":"nodes/material/#cript.data_model.nodes.base_node.BaseNode.get","text":"Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object.","title":"get()"},{"location":"nodes/material/#cript.data_model.nodes.base_node.BaseNode.search","text":"Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"search()"},{"location":"nodes/process/","text":"Process \u00b6 Object representing a process of creating or transforming a Material object. save ( get_level = 1 , update_existing = False ) \u00b6 Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False delete () \u00b6 Delete a node in the database and clear it locally. refresh ( get_level = 1 ) \u00b6 Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update ( get_level = 1 , ** kwargs ) \u00b6 Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {} create ( get_level = 1 , update_existing = False , ** kwargs ) classmethod \u00b6 Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node. get ( get_level = 1 , ** kwargs ) classmethod \u00b6 Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object. search ( limit = None , offset = None , get_level = 1 , ** kwargs ) classmethod \u00b6 Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"Process"},{"location":"nodes/process/#process","text":"Object representing a process of creating or transforming a Material object.","title":"Process"},{"location":"nodes/process/#cript.data_model.nodes.base_node.BaseNode.save","text":"Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False","title":"save()"},{"location":"nodes/process/#cript.data_model.nodes.base_node.BaseNode.delete","text":"Delete a node in the database and clear it locally.","title":"delete()"},{"location":"nodes/process/#cript.data_model.nodes.base_node.BaseNode.refresh","text":"Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1","title":"refresh()"},{"location":"nodes/process/#cript.data_model.nodes.base_node.BaseNode.update","text":"Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {}","title":"update()"},{"location":"nodes/process/#cript.data_model.nodes.base_node.BaseNode.create","text":"Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node.","title":"create()"},{"location":"nodes/process/#cript.data_model.nodes.base_node.BaseNode.get","text":"Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object.","title":"get()"},{"location":"nodes/process/#cript.data_model.nodes.base_node.BaseNode.search","text":"Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"search()"},{"location":"nodes/project/","text":"Project \u00b6 Object representing a logical grouping of Material , File , and Collection objects. save ( get_level = 1 , update_existing = False ) \u00b6 Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False delete () \u00b6 Delete a node in the database and clear it locally. refresh ( get_level = 1 ) \u00b6 Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update ( get_level = 1 , ** kwargs ) \u00b6 Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {} create ( get_level = 1 , update_existing = False , ** kwargs ) classmethod \u00b6 Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node. get ( get_level = 1 , ** kwargs ) classmethod \u00b6 Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object. search ( limit = None , offset = None , get_level = 1 , ** kwargs ) classmethod \u00b6 Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"Project"},{"location":"nodes/project/#project","text":"Object representing a logical grouping of Material , File , and Collection objects.","title":"Project"},{"location":"nodes/project/#cript.data_model.nodes.base_node.BaseNode.save","text":"Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False","title":"save()"},{"location":"nodes/project/#cript.data_model.nodes.base_node.BaseNode.delete","text":"Delete a node in the database and clear it locally.","title":"delete()"},{"location":"nodes/project/#cript.data_model.nodes.base_node.BaseNode.refresh","text":"Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1","title":"refresh()"},{"location":"nodes/project/#cript.data_model.nodes.base_node.BaseNode.update","text":"Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {}","title":"update()"},{"location":"nodes/project/#cript.data_model.nodes.base_node.BaseNode.create","text":"Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node.","title":"create()"},{"location":"nodes/project/#cript.data_model.nodes.base_node.BaseNode.get","text":"Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object.","title":"get()"},{"location":"nodes/project/#cript.data_model.nodes.base_node.BaseNode.search","text":"Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"search()"},{"location":"nodes/reference/","text":"Reference \u00b6 Object representing a bibliographic resource. save ( get_level = 1 , update_existing = False ) \u00b6 Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False save ( get_level = 1 , update_existing = False ) \u00b6 Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False delete () \u00b6 Delete a node in the database and clear it locally. refresh ( get_level = 1 ) \u00b6 Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update ( get_level = 1 , ** kwargs ) \u00b6 Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {} create ( get_level = 1 , update_existing = False , ** kwargs ) classmethod \u00b6 Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node. get ( get_level = 1 , ** kwargs ) classmethod \u00b6 Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object. search ( limit = None , offset = None , get_level = 1 , ** kwargs ) classmethod \u00b6 Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"Reference"},{"location":"nodes/reference/#reference","text":"Object representing a bibliographic resource.","title":"Reference"},{"location":"nodes/reference/#cript.data_model.nodes.reference.Reference.save","text":"Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False","title":"save()"},{"location":"nodes/reference/#cript.data_model.nodes.base_node.BaseNode.save","text":"Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False","title":"save()"},{"location":"nodes/reference/#cript.data_model.nodes.base_node.BaseNode.delete","text":"Delete a node in the database and clear it locally.","title":"delete()"},{"location":"nodes/reference/#cript.data_model.nodes.base_node.BaseNode.refresh","text":"Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1","title":"refresh()"},{"location":"nodes/reference/#cript.data_model.nodes.base_node.BaseNode.update","text":"Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {}","title":"update()"},{"location":"nodes/reference/#cript.data_model.nodes.base_node.BaseNode.create","text":"Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node.","title":"create()"},{"location":"nodes/reference/#cript.data_model.nodes.base_node.BaseNode.get","text":"Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object.","title":"get()"},{"location":"nodes/reference/#cript.data_model.nodes.base_node.BaseNode.search","text":"Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"search()"},{"location":"nodes/software/","text":"Software \u00b6 Object representing a computation tool, code, programing language, or software package. save ( get_level = 1 , update_existing = False ) \u00b6 Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False delete () \u00b6 Delete a node in the database and clear it locally. refresh ( get_level = 1 ) \u00b6 Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update ( get_level = 1 , ** kwargs ) \u00b6 Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {} create ( get_level = 1 , update_existing = False , ** kwargs ) classmethod \u00b6 Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node. get ( get_level = 1 , ** kwargs ) classmethod \u00b6 Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object. search ( limit = None , offset = None , get_level = 1 , ** kwargs ) classmethod \u00b6 Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"Software"},{"location":"nodes/software/#software","text":"Object representing a computation tool, code, programing language, or software package.","title":"Software"},{"location":"nodes/software/#cript.data_model.nodes.base_node.BaseNode.save","text":"Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False","title":"save()"},{"location":"nodes/software/#cript.data_model.nodes.base_node.BaseNode.delete","text":"Delete a node in the database and clear it locally.","title":"delete()"},{"location":"nodes/software/#cript.data_model.nodes.base_node.BaseNode.refresh","text":"Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1","title":"refresh()"},{"location":"nodes/software/#cript.data_model.nodes.base_node.BaseNode.update","text":"Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {}","title":"update()"},{"location":"nodes/software/#cript.data_model.nodes.base_node.BaseNode.create","text":"Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node.","title":"create()"},{"location":"nodes/software/#cript.data_model.nodes.base_node.BaseNode.get","text":"Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object.","title":"get()"},{"location":"nodes/software/#cript.data_model.nodes.base_node.BaseNode.search","text":"Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"search()"},{"location":"nodes/user/","text":"User \u00b6 Object representing a CRIPT user. Note: A user cannot be created or modified using the SDK. This object is for read-only purposes only. save ( get_level = 1 , update_existing = False ) \u00b6 Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False delete () \u00b6 Delete a node in the database and clear it locally. refresh ( get_level = 1 ) \u00b6 Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update ( get_level = 1 , ** kwargs ) \u00b6 Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {} create ( get_level = 1 , update_existing = False , ** kwargs ) classmethod \u00b6 Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node. get ( get_level = 1 , ** kwargs ) classmethod \u00b6 Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object. search ( limit = None , offset = None , get_level = 1 , ** kwargs ) classmethod \u00b6 Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"User"},{"location":"nodes/user/#user","text":"Object representing a CRIPT user. Note: A user cannot be created or modified using the SDK. This object is for read-only purposes only.","title":"User"},{"location":"nodes/user/#cript.data_model.nodes.base_node.BaseNode.save","text":"Create or update a node in the database. Parameters: Name Type Description Default node The node to be saved. required get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False","title":"save()"},{"location":"nodes/user/#cript.data_model.nodes.base_node.BaseNode.delete","text":"Delete a node in the database and clear it locally.","title":"delete()"},{"location":"nodes/user/#cript.data_model.nodes.base_node.BaseNode.refresh","text":"Overwrite a node's attributes with the latest values from the database. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1","title":"refresh()"},{"location":"nodes/user/#cript.data_model.nodes.base_node.BaseNode.update","text":"Updates and immediately saves a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Arguments to update the node. {}","title":"update()"},{"location":"nodes/user/#cript.data_model.nodes.base_node.BaseNode.create","text":"Immediately creates a node. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 update_existing bool Indicates whether to update an existing node with the same unique fields. False **kwargs Arguments for the constructor. {} Returns: Type Description cript.data_model.nodes.BaseNode The created node.","title":"create()"},{"location":"nodes/user/#cript.data_model.nodes.base_node.BaseNode.get","text":"Get the JSON for a node and use it to generate a local node object. Parameters: Name Type Description Default get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.nodes.BaseNode The generated node object.","title":"get()"},{"location":"nodes/user/#cript.data_model.nodes.base_node.BaseNode.search","text":"Send a query to the API and display the results. Parameters: Name Type Description Default limit Union [ int , None] The max number of items to return. None offset Union [ int , None] The starting position of the query. None get_level int Level to recursively get nested nodes. 1 **kwargs Query parameters. {} Returns: Type Description cript.data_model.paginator.Paginator A Paginator object.","title":"search()"},{"location":"subobjects/algorithm/","text":"Algorithm \u00b6 Object that represents an algorithm used in :class: Computation and ComputationalProcess objects.","title":"Algorithm"},{"location":"subobjects/algorithm/#algorithm","text":"Object that represents an algorithm used in :class: Computation and ComputationalProcess objects.","title":"Algorithm"},{"location":"subobjects/citation/","text":"Citation \u00b6 Object representing how a Reference object is applied in a given context.","title":"Citation"},{"location":"subobjects/citation/#citation","text":"Object representing how a Reference object is applied in a given context.","title":"Citation"},{"location":"subobjects/computational_forcefield/","text":"ComputationalForcefield \u00b6 Object representing the computational forcefield of a virtual Material .","title":"ComputationalForcefield"},{"location":"subobjects/computational_forcefield/#computationalforcefield","text":"Object representing the computational forcefield of a virtual Material .","title":"ComputationalForcefield"},{"location":"subobjects/condition/","text":"Condition \u00b6 Object representing a condition (e.g., temperature). These are used as modifiers for Property and Process objects.","title":"Condition"},{"location":"subobjects/condition/#condition","text":"Object representing a condition (e.g., temperature). These are used as modifiers for Property and Process objects.","title":"Condition"},{"location":"subobjects/equipment/","text":"Equipment \u00b6 Object representing equipment used in a Process .","title":"Equipment"},{"location":"subobjects/equipment/#equipment","text":"Object representing equipment used in a Process .","title":"Equipment"},{"location":"subobjects/identifier/","text":"Identifier \u00b6 Object representing an identifier of a Material object (e.g., CAS, BigSMILES).","title":"Identifier"},{"location":"subobjects/identifier/#identifier","text":"Object representing an identifier of a Material object (e.g., CAS, BigSMILES).","title":"Identifier"},{"location":"subobjects/ingredient/","text":"Ingredient \u00b6 Object representing a Material object being used as an input to a Process object.","title":"Ingredient"},{"location":"subobjects/ingredient/#ingredient","text":"Object representing a Material object being used as an input to a Process object.","title":"Ingredient"},{"location":"subobjects/parameter/","text":"Parameter \u00b6 Object representing a an input value to an :class: Algorithm .","title":"Parameter"},{"location":"subobjects/parameter/#parameter","text":"Object representing a an input value to an :class: Algorithm .","title":"Parameter"},{"location":"subobjects/property/","text":"Property \u00b6 Object representing an observed or measured attribute of a Material or Process object.","title":"Property"},{"location":"subobjects/property/#property","text":"Object representing an observed or measured attribute of a Material or Process object.","title":"Property"},{"location":"subobjects/quantity/","text":"Quantity \u00b6 Object representing a specified amount of an Ingredient object used as input to a Process object.","title":"Quantity"},{"location":"subobjects/quantity/#quantity","text":"Object representing a specified amount of an Ingredient object used as input to a Process object.","title":"Quantity"},{"location":"subobjects/software_configuration/","text":"SoftwareConfiguration \u00b6 Object representing the Software and set of Algorithm objects used to execute a Computation or ComputationalProcess .","title":"SoftwareConfiguration"},{"location":"subobjects/software_configuration/#softwareconfiguration","text":"Object representing the Software and set of Algorithm objects used to execute a Computation or ComputationalProcess .","title":"SoftwareConfiguration"},{"location":"tutorials/simulation/","text":"Simulation example workflow \u00b6 Refer to Quickstart for installation instructions. Connect to the public API \u00b6 import cript host = \"criptapp.org\" token = \"<your_api_token>\" cript . API ( host , token ) Note Your API token can be found in the UI under Account Settings . Create a Project node \u00b6 proj = cript . Project ( name = \"<your_project_name>\" ) proj . save () Note Project names are globally unique. Create a Collection node \u00b6 coll = cript . Collection ( project = proj , name = \"Simulation Tutorial\" ) coll . save () Create an Experiment node \u00b6 expt = cript . Experiment ( collection = coll , name = \"Bulk simulation of polystyrene\" ) expt . save () Get the relevant Software nodes \u00b6 python = cript . Software . get ( name = \"python\" , version = \"3.9\" ) rdkit = cript . Software . get ( name = \"rdkit\" , version = \"2020.9\" ) stage = cript . Software . get ( name = \"stage\" , source = \"https://doi.org/10.1021/jp505332p\" ) packmol = cript . Software . get ( name = \"Packmol\" , source = \"http://m3g.iqm.unicamp.br/packmol\" , version = \"N/A\" ) openmm = cript . Software . get ( name = \"openmm\" , version = \"7.5\" ) Create Software Configurations \u00b6 python_config = cript . SoftwareConfiguration ( software = python ) rdkit_config = cript . SoftwareConfiguration ( software = rdkit ) stage_config = cript . SoftwareConfiguration ( software = stage ) openmm_config = cript . SoftwareConfiguration ( software = openmm , algorithms = [ cript . Algorithm ( key = \"+energy_minimization\" , type = \"initialization\" ) ] ) packmol_config = cript . SoftwareConfiguration ( software = packmol , algorithms = [ cript . Algorithm ( key = \"+molecule_packing\" , type = \"initialization\" , parameters = [ cript . Parameter ( key = \"+maxit\" , value = 50 ), cript . Parameter ( key = \"+nloop\" , value = 10 ), cript . Parameter ( key = \"+tolerance\" , value = 4.0 , unit = \"angstrom\" ), ] ) ] ) Create Computations \u00b6 init = cript . Computation . create ( experiment = expt , name = \"Initial snapshot and force-field generation\" , type = \"initialization\" , software_configurations = [ python_config , rdkit_config , stage_config , packmol_config , openmm_config , ] ) equi = cript . Computation . create ( experiment = expt , name = \"Equilibrate data prior to measurement\" , type = \"MD\" , software_configurations = [ python_config , openmm_config ], conditions = [ cript . Condition ( key = \"time_duration\" , value = 100.0 , unit = \"ns\" ), cript . Condition ( key = \"temperature\" , value = 450.0 , unit = \"K\" ), cript . Condition ( key = \"pressure\" , value = 1.0 , unit = \"bar\" ), cript . Condition ( key = \"number\" , value = 31 ), ], prerequisite_computation = init , ) bulk = cript . Computation . create ( experiment = expt , name = \"Bulk simulation for measurement\" , type = \"MD\" , software_configurations = [ python_config , openmm_config ], conditions = [ cript . Condition ( key = \"time_duration\" , value = 50.0 , unit = \"ns\" ), cript . Condition ( key = \"temperature\" , value = 450.0 , unit = \"K\" ), cript . Condition ( key = \"pressure\" , value = 1.0 , unit = \"bar\" ), cript . Condition ( key = \"number\" , value = 31 ), ], prerequisite_computation = equi , ) ana = cript . Computation . create ( experiment = expt , name = \"Density analysis\" , type = \"analysis\" , software_configurations = [ python_config ], prerequisite_computation = bulk , ) Note Notice the use of create() here, which instantiates and saves the object in one go. Create and Upload Files \u00b6 First, we'll instantiate our File nodes. packing_file = cript . File ( project = proj , source = \"path/to/local/file\" ) forcefield_file = cript . File ( project = proj , source = \"path/to/local/file\" ) snap_file = cript . File ( project = proj , source = \"path/to/local/file\" ) final_file = cript . File ( project = proj , source = \"path/to/local/file\" ) Note The source field should point to any file on your local filesystem. Info Depending on the file size, there could be a delay while the checksum is generated. Next, we'll upload the local files by saving the File nodes. Follow all prompts that appear. packing_file . save () forcefield_file . save () snap_file . save () final_file . save () Create Data \u00b6 First, we'll create a few Data nodes. packing_data = cript . Data . create ( experiment = expt , name = \"Loosely packed chains\" , type = \"computation_config\" , files = [ packing_file ], computations = [ init ], notes = \"PDB file without topology describing an initial system.\" , ) forcefield_data = cript . Data . create ( experiment = expt , name = \"OpenMM forcefield\" , type = \"computation_forcefield\" , files = [ forcefield_file ], computations = [ init ], notes = \"Full forcefield definition and topology.\" , ) equi_snap = cript . Data . create ( experiment = expt , name = \"Equilibrated simulation snapshot\" , type = \"computation_config\" , files = [ snap_file ], computations = [ equi ], ) final_data = cript . Data . create ( experiment = expt , name = \"Logged volume during simulation\" , type = \"+raw_data\" , files = [ final_file ], computations = [ bulk ], ) Next, we'll add these to the appropriate Computation nodes. init . update ( output_data = [ packing_data , forcefield_data ]) equi . update ( input_data = [ packing_data , forcefield_data ], output_data = [ equi_snap ] ) ana . update ( input_data = [ final_data ]) bulk . update ( output_data = [ final_data ]) Note Notice the use of update() here, which updates and saves the object in one go. Create a virtual Material \u00b6 First, we'll instantiate our Material node: polystyrene = cript . Material ( project = proj , name = \"Polystyrene\" ) Next, we'll add some Identifiers nodes: names = cript . Identifier ( key = \"names\" , value = [ \"poly(styrene)\" , \"poly(vinylbenzene)\" ] ) bigsmiles = cript . Identifier ( key = \"bigsmiles\" , value = \"[H]{[>][<]C(C[>])c1ccccc1[<]}C(C)CC\" ) chem_repeat = cript . Identifier ( key = \"chem_repeat\" , value = \"C8H8\" ) polystyrene . add_identifier ( names ) polystyrene . add_identifier ( chem_repeat ) polystyrene . add_identifier ( bigsmiles ) ... and Property nodes: phase = cript . Property ( key = \"phase\" , value = \"solid\" ) color = cript . Property ( key = \"color\" , value = \"white\" ) polystyrene . add_property ( phase ) polystyrene . add_property ( color ) Last, we'll create a ComputationalForcefield node and add it to the Material: forcefield = cript . ComputationalForcefield ( key = \"opls_aa\" , building_block = \"atom\" , source = \"Custom determination via STAGE\" , data = forcefield_data ) polystyrene . computational_forcefield = forcefield polystyrene . save () Conclusion \u00b6 You made it! We hope this tutorial has been helpful. Please let us know how you think it could be improved.","title":"Simulation"},{"location":"tutorials/simulation/#simulation-example-workflow","text":"Refer to Quickstart for installation instructions.","title":"Simulation example workflow"},{"location":"tutorials/simulation/#connect-to-the-public-api","text":"import cript host = \"criptapp.org\" token = \"<your_api_token>\" cript . API ( host , token ) Note Your API token can be found in the UI under Account Settings .","title":"Connect to the public API"},{"location":"tutorials/simulation/#create-a-project-node","text":"proj = cript . Project ( name = \"<your_project_name>\" ) proj . save () Note Project names are globally unique.","title":"Create a Project node"},{"location":"tutorials/simulation/#create-a-collection-node","text":"coll = cript . Collection ( project = proj , name = \"Simulation Tutorial\" ) coll . save ()","title":"Create a Collection node"},{"location":"tutorials/simulation/#create-an-experiment-node","text":"expt = cript . Experiment ( collection = coll , name = \"Bulk simulation of polystyrene\" ) expt . save ()","title":"Create an Experiment node"},{"location":"tutorials/simulation/#get-the-relevant-software-nodes","text":"python = cript . Software . get ( name = \"python\" , version = \"3.9\" ) rdkit = cript . Software . get ( name = \"rdkit\" , version = \"2020.9\" ) stage = cript . Software . get ( name = \"stage\" , source = \"https://doi.org/10.1021/jp505332p\" ) packmol = cript . Software . get ( name = \"Packmol\" , source = \"http://m3g.iqm.unicamp.br/packmol\" , version = \"N/A\" ) openmm = cript . Software . get ( name = \"openmm\" , version = \"7.5\" )","title":"Get the relevant Software nodes"},{"location":"tutorials/simulation/#create-software-configurations","text":"python_config = cript . SoftwareConfiguration ( software = python ) rdkit_config = cript . SoftwareConfiguration ( software = rdkit ) stage_config = cript . SoftwareConfiguration ( software = stage ) openmm_config = cript . SoftwareConfiguration ( software = openmm , algorithms = [ cript . Algorithm ( key = \"+energy_minimization\" , type = \"initialization\" ) ] ) packmol_config = cript . SoftwareConfiguration ( software = packmol , algorithms = [ cript . Algorithm ( key = \"+molecule_packing\" , type = \"initialization\" , parameters = [ cript . Parameter ( key = \"+maxit\" , value = 50 ), cript . Parameter ( key = \"+nloop\" , value = 10 ), cript . Parameter ( key = \"+tolerance\" , value = 4.0 , unit = \"angstrom\" ), ] ) ] )","title":"Create Software Configurations"},{"location":"tutorials/simulation/#create-computations","text":"init = cript . Computation . create ( experiment = expt , name = \"Initial snapshot and force-field generation\" , type = \"initialization\" , software_configurations = [ python_config , rdkit_config , stage_config , packmol_config , openmm_config , ] ) equi = cript . Computation . create ( experiment = expt , name = \"Equilibrate data prior to measurement\" , type = \"MD\" , software_configurations = [ python_config , openmm_config ], conditions = [ cript . Condition ( key = \"time_duration\" , value = 100.0 , unit = \"ns\" ), cript . Condition ( key = \"temperature\" , value = 450.0 , unit = \"K\" ), cript . Condition ( key = \"pressure\" , value = 1.0 , unit = \"bar\" ), cript . Condition ( key = \"number\" , value = 31 ), ], prerequisite_computation = init , ) bulk = cript . Computation . create ( experiment = expt , name = \"Bulk simulation for measurement\" , type = \"MD\" , software_configurations = [ python_config , openmm_config ], conditions = [ cript . Condition ( key = \"time_duration\" , value = 50.0 , unit = \"ns\" ), cript . Condition ( key = \"temperature\" , value = 450.0 , unit = \"K\" ), cript . Condition ( key = \"pressure\" , value = 1.0 , unit = \"bar\" ), cript . Condition ( key = \"number\" , value = 31 ), ], prerequisite_computation = equi , ) ana = cript . Computation . create ( experiment = expt , name = \"Density analysis\" , type = \"analysis\" , software_configurations = [ python_config ], prerequisite_computation = bulk , ) Note Notice the use of create() here, which instantiates and saves the object in one go.","title":"Create Computations"},{"location":"tutorials/simulation/#create-and-upload-files","text":"First, we'll instantiate our File nodes. packing_file = cript . File ( project = proj , source = \"path/to/local/file\" ) forcefield_file = cript . File ( project = proj , source = \"path/to/local/file\" ) snap_file = cript . File ( project = proj , source = \"path/to/local/file\" ) final_file = cript . File ( project = proj , source = \"path/to/local/file\" ) Note The source field should point to any file on your local filesystem. Info Depending on the file size, there could be a delay while the checksum is generated. Next, we'll upload the local files by saving the File nodes. Follow all prompts that appear. packing_file . save () forcefield_file . save () snap_file . save () final_file . save ()","title":"Create and Upload Files"},{"location":"tutorials/simulation/#create-data","text":"First, we'll create a few Data nodes. packing_data = cript . Data . create ( experiment = expt , name = \"Loosely packed chains\" , type = \"computation_config\" , files = [ packing_file ], computations = [ init ], notes = \"PDB file without topology describing an initial system.\" , ) forcefield_data = cript . Data . create ( experiment = expt , name = \"OpenMM forcefield\" , type = \"computation_forcefield\" , files = [ forcefield_file ], computations = [ init ], notes = \"Full forcefield definition and topology.\" , ) equi_snap = cript . Data . create ( experiment = expt , name = \"Equilibrated simulation snapshot\" , type = \"computation_config\" , files = [ snap_file ], computations = [ equi ], ) final_data = cript . Data . create ( experiment = expt , name = \"Logged volume during simulation\" , type = \"+raw_data\" , files = [ final_file ], computations = [ bulk ], ) Next, we'll add these to the appropriate Computation nodes. init . update ( output_data = [ packing_data , forcefield_data ]) equi . update ( input_data = [ packing_data , forcefield_data ], output_data = [ equi_snap ] ) ana . update ( input_data = [ final_data ]) bulk . update ( output_data = [ final_data ]) Note Notice the use of update() here, which updates and saves the object in one go.","title":"Create Data"},{"location":"tutorials/simulation/#create-a-virtual-material","text":"First, we'll instantiate our Material node: polystyrene = cript . Material ( project = proj , name = \"Polystyrene\" ) Next, we'll add some Identifiers nodes: names = cript . Identifier ( key = \"names\" , value = [ \"poly(styrene)\" , \"poly(vinylbenzene)\" ] ) bigsmiles = cript . Identifier ( key = \"bigsmiles\" , value = \"[H]{[>][<]C(C[>])c1ccccc1[<]}C(C)CC\" ) chem_repeat = cript . Identifier ( key = \"chem_repeat\" , value = \"C8H8\" ) polystyrene . add_identifier ( names ) polystyrene . add_identifier ( chem_repeat ) polystyrene . add_identifier ( bigsmiles ) ... and Property nodes: phase = cript . Property ( key = \"phase\" , value = \"solid\" ) color = cript . Property ( key = \"color\" , value = \"white\" ) polystyrene . add_property ( phase ) polystyrene . add_property ( color ) Last, we'll create a ComputationalForcefield node and add it to the Material: forcefield = cript . ComputationalForcefield ( key = \"opls_aa\" , building_block = \"atom\" , source = \"Custom determination via STAGE\" , data = forcefield_data ) polystyrene . computational_forcefield = forcefield polystyrene . save ()","title":"Create a virtual Material"},{"location":"tutorials/simulation/#conclusion","text":"You made it! We hope this tutorial has been helpful. Please let us know how you think it could be improved.","title":"Conclusion"},{"location":"tutorials/synthesis/","text":"Example workflow for a synthesis project \u00b6 Refer to Quickstart for installation instructions. Connect to the public API \u00b6 import cript host = \"criptapp.org\" token = \"<your_api_token>\" cript . API ( host , token ) Note Your API token can be found in the UI under Account Settings . Create a Project node \u00b6 proj = cript . Project ( name = \"<your_project_name>\" ) proj . save () Note Project names are globally unique. Create a Collection node \u00b6 coll = cript . Collection . create ( project = proj , name = \"Synthesis Tutorial\" ) Note Notice the use of create() here, which instantiates and saves the object in one go. Create an Experiment node \u00b6 expt = cript . Experiment ( collection = coll , name = \"Anionic Polymerization of Styrene with SecBuLi\" ) expt . save () Get Material nodes \u00b6 For this tutorial, we will get an existing Inventory node from the database. This contains all of the Material nodes we will be using. uid = \"134f2658-6245-42d8-a47e-6424aa3472b4\" inv = cript . Inventory . get ( uid = uid ) Notice that the Material node objects have been auto-generated. type ( inv . materials [ 0 ]) # <class 'cript.data_model.nodes.material.Material'> Create a Process node \u00b6 prcs = cript . Process ( experiment = expt , name = \"Anionic of Styrene\" , type = \"multistep\" , description = \"In an argon filled glovebox, a round bottom flask was filled with 216 ml of dried toluene. The \" \"solution of secBuLi (3 ml, 3.9 mmol) was added next, followed by styrene (22.3 g, 176 mmol) to \" \"initiate the polymerization. The reaction mixture immediately turned orange. After 30 min, \" \"the reaction was quenched with the addition of 3 ml of methanol. The polymer was isolated by \" \"precipitation in methanol 3 times and dried under vacuum.\" ) prcs . save () Add Ingredient nodes to the Process node \u00b6 First, let's grab the Material nodes we need from the Inventory node. solution = inv [ 'SecBuLi solution 1.4M cHex' ] toluene = inv [ 'toluene' ] styrene = inv [ 'styrene' ] butanol = inv [ '1-butanol' ] methanol = inv [ 'methanol' ] Next, we'll define Quantity nodes indicating the amount of each Ingredient. initiator_qty = cript . Quantity ( key = \"volume\" , value = 0.017 , unit = \"ml\" ) solvent_qty = cript . Quantity ( key = \"volume\" , value = 10 , unit = \"ml\" ) monomer_qty = cript . Quantity ( key = \"mass\" , value = 0.455 , unit = \"g\" ) quench_qty = cript . Quantity ( key = \"volume\" , value = 5 , unit = \"ml\" ) workup_qty = cript . Quantity ( key = \"volume\" , value = 100 , unit = \"ml\" ) Next, we'll create Ingredient nodes for each. initiator = cript . Ingredient ( keyword = \"initiator\" , material = solution , quantities = [ initiator_qty ] ) solvent = cript . Ingredient ( keyword = \"solvent\" , material = toluene , quantities = [ solvent_qty ] ) monomer = cript . Ingredient ( keyword = \"monomer\" , material = styrene , quantities = [ monomer_qty ] ) quench = cript . Ingredient ( keyword = \"quench\" , material = butanol , quantities = [ quench_qty ] ) workup = cript . Ingredient ( keyword = \"workup\" , material = methanol , quantities = [ workup_qty ] ) Last, we'll add the Ingredient nodes to the Process node. prcs . add_ingredient ( initiator ) prcs . add_ingredient ( solvent ) prcs . add_ingredient ( monomer ) prcs . add_ingredient ( quench ) prcs . add_ingredient ( workup ) Add Condition nodes to the Process node \u00b6 temp = cript . Condition ( key = \"temperature\" , value = 25 , unit = \"celsius\" ) time = cript . Condition ( key = \"time_duration\" , value = 60 , unit = \"min\" ) prcs . add_condition ( temp ) prcs . add_condition ( time ) Add a Property node to the Process node \u00b6 yield_mass = cript . Property ( key = \"yield_mass\" , value = 0.47 , unit = \"g\" , method = \"scale\" ) prcs . add_property ( yield_mass ) Create a Material node (process product) \u00b6 First, we'll instantiate the node. polystyrene = cript . Material ( project = proj , name = \"polystyrene\" ) Next, we'll add some Identifier nodes. names = cript . Identifier ( key = \"names\" , value = [ \"poly(styrene)\" , \"poly(vinylbenzene)\" ] ) bigsmiles = cript . Identifier ( key = \"bigsmiles\" , value = \"[H]{[>][<]C(C[>])c1ccccc1[<]}C(C)CC\" ) chem_repeat = cript . Identifier ( key = \"chem_repeat\" , value = \"C8H8\" ) polystyrene . add_identifier ( names ) polystyrene . add_identifier ( chem_repeat ) polystyrene . add_identifier ( bigsmiles ) Next, we'll add some Property nodes. phase = cript . Property ( key = \"phase\" , value = \"solid\" ) color = cript . Property ( key = \"color\" , value = \"white\" ) polystyrene . add_property ( phase ) polystyrene . add_property ( color ) Now we can save the Material and add it to the Process node as a product. polystyrene . save () prcs . add_product ( polystyrene ) Last, we can save the Process node. prcs . save () Create a File node and upload a file \u00b6 First, we'll instantiate a File node and associate it with the Data node created above. path = \"path/to/local/file\" f = cript . File ( project = proj , source = path ) Note The source field should point to a file on your local filesystem. Info Depending on the file size, there could be a delay while the checksum is generated. Next, we'll upload the local file by saving the File node. Follow all prompts that appear. api . save ( f ) Create a Data node \u00b6 sec = cript . Data ( experiment = expt , name = \"Crude SEC of polystyrene\" , type = \"sec_trace\" , ) .. then add the uploaded File to it: sec . add_file ( f ) sec . save () Associate a Data node with a Property node \u00b6 First, we'll create one more Property node for polystyrene. mw_n = cript . Property ( key = \"mw_n\" , value = 5200 , unit = \"g/mol\" ) Next, we'll add the Data node to the new Property node. mw_n . data = sec Last, we'll add the new Property node to polystyrene and then save it. polystyrene . add_property ( mw_n ) polystyrene . save () Conclusion \u00b6 You made it! We hope this tutorial has been helpful. Please let us know how you think it could be improved.","title":"Synthesis"},{"location":"tutorials/synthesis/#example-workflow-for-a-synthesis-project","text":"Refer to Quickstart for installation instructions.","title":"Example workflow for a synthesis project"},{"location":"tutorials/synthesis/#connect-to-the-public-api","text":"import cript host = \"criptapp.org\" token = \"<your_api_token>\" cript . API ( host , token ) Note Your API token can be found in the UI under Account Settings .","title":"Connect to the public API"},{"location":"tutorials/synthesis/#create-a-project-node","text":"proj = cript . Project ( name = \"<your_project_name>\" ) proj . save () Note Project names are globally unique.","title":"Create a Project node"},{"location":"tutorials/synthesis/#create-a-collection-node","text":"coll = cript . Collection . create ( project = proj , name = \"Synthesis Tutorial\" ) Note Notice the use of create() here, which instantiates and saves the object in one go.","title":"Create a Collection node"},{"location":"tutorials/synthesis/#create-an-experiment-node","text":"expt = cript . Experiment ( collection = coll , name = \"Anionic Polymerization of Styrene with SecBuLi\" ) expt . save ()","title":"Create an Experiment node"},{"location":"tutorials/synthesis/#get-material-nodes","text":"For this tutorial, we will get an existing Inventory node from the database. This contains all of the Material nodes we will be using. uid = \"134f2658-6245-42d8-a47e-6424aa3472b4\" inv = cript . Inventory . get ( uid = uid ) Notice that the Material node objects have been auto-generated. type ( inv . materials [ 0 ]) # <class 'cript.data_model.nodes.material.Material'>","title":"Get Material nodes"},{"location":"tutorials/synthesis/#create-a-process-node","text":"prcs = cript . Process ( experiment = expt , name = \"Anionic of Styrene\" , type = \"multistep\" , description = \"In an argon filled glovebox, a round bottom flask was filled with 216 ml of dried toluene. The \" \"solution of secBuLi (3 ml, 3.9 mmol) was added next, followed by styrene (22.3 g, 176 mmol) to \" \"initiate the polymerization. The reaction mixture immediately turned orange. After 30 min, \" \"the reaction was quenched with the addition of 3 ml of methanol. The polymer was isolated by \" \"precipitation in methanol 3 times and dried under vacuum.\" ) prcs . save ()","title":"Create a Process node"},{"location":"tutorials/synthesis/#add-ingredient-nodes-to-the-process-node","text":"First, let's grab the Material nodes we need from the Inventory node. solution = inv [ 'SecBuLi solution 1.4M cHex' ] toluene = inv [ 'toluene' ] styrene = inv [ 'styrene' ] butanol = inv [ '1-butanol' ] methanol = inv [ 'methanol' ] Next, we'll define Quantity nodes indicating the amount of each Ingredient. initiator_qty = cript . Quantity ( key = \"volume\" , value = 0.017 , unit = \"ml\" ) solvent_qty = cript . Quantity ( key = \"volume\" , value = 10 , unit = \"ml\" ) monomer_qty = cript . Quantity ( key = \"mass\" , value = 0.455 , unit = \"g\" ) quench_qty = cript . Quantity ( key = \"volume\" , value = 5 , unit = \"ml\" ) workup_qty = cript . Quantity ( key = \"volume\" , value = 100 , unit = \"ml\" ) Next, we'll create Ingredient nodes for each. initiator = cript . Ingredient ( keyword = \"initiator\" , material = solution , quantities = [ initiator_qty ] ) solvent = cript . Ingredient ( keyword = \"solvent\" , material = toluene , quantities = [ solvent_qty ] ) monomer = cript . Ingredient ( keyword = \"monomer\" , material = styrene , quantities = [ monomer_qty ] ) quench = cript . Ingredient ( keyword = \"quench\" , material = butanol , quantities = [ quench_qty ] ) workup = cript . Ingredient ( keyword = \"workup\" , material = methanol , quantities = [ workup_qty ] ) Last, we'll add the Ingredient nodes to the Process node. prcs . add_ingredient ( initiator ) prcs . add_ingredient ( solvent ) prcs . add_ingredient ( monomer ) prcs . add_ingredient ( quench ) prcs . add_ingredient ( workup )","title":"Add Ingredient nodes to the Process node"},{"location":"tutorials/synthesis/#add-condition-nodes-to-the-process-node","text":"temp = cript . Condition ( key = \"temperature\" , value = 25 , unit = \"celsius\" ) time = cript . Condition ( key = \"time_duration\" , value = 60 , unit = \"min\" ) prcs . add_condition ( temp ) prcs . add_condition ( time )","title":"Add Condition nodes to the Process node"},{"location":"tutorials/synthesis/#add-a-property-node-to-the-process-node","text":"yield_mass = cript . Property ( key = \"yield_mass\" , value = 0.47 , unit = \"g\" , method = \"scale\" ) prcs . add_property ( yield_mass )","title":"Add a Property node to the Process node"},{"location":"tutorials/synthesis/#create-a-material-node-process-product","text":"First, we'll instantiate the node. polystyrene = cript . Material ( project = proj , name = \"polystyrene\" ) Next, we'll add some Identifier nodes. names = cript . Identifier ( key = \"names\" , value = [ \"poly(styrene)\" , \"poly(vinylbenzene)\" ] ) bigsmiles = cript . Identifier ( key = \"bigsmiles\" , value = \"[H]{[>][<]C(C[>])c1ccccc1[<]}C(C)CC\" ) chem_repeat = cript . Identifier ( key = \"chem_repeat\" , value = \"C8H8\" ) polystyrene . add_identifier ( names ) polystyrene . add_identifier ( chem_repeat ) polystyrene . add_identifier ( bigsmiles ) Next, we'll add some Property nodes. phase = cript . Property ( key = \"phase\" , value = \"solid\" ) color = cript . Property ( key = \"color\" , value = \"white\" ) polystyrene . add_property ( phase ) polystyrene . add_property ( color ) Now we can save the Material and add it to the Process node as a product. polystyrene . save () prcs . add_product ( polystyrene ) Last, we can save the Process node. prcs . save ()","title":"Create a Material node (process product)"},{"location":"tutorials/synthesis/#create-a-file-node-and-upload-a-file","text":"First, we'll instantiate a File node and associate it with the Data node created above. path = \"path/to/local/file\" f = cript . File ( project = proj , source = path ) Note The source field should point to a file on your local filesystem. Info Depending on the file size, there could be a delay while the checksum is generated. Next, we'll upload the local file by saving the File node. Follow all prompts that appear. api . save ( f )","title":"Create a File node and upload a file"},{"location":"tutorials/synthesis/#create-a-data-node","text":"sec = cript . Data ( experiment = expt , name = \"Crude SEC of polystyrene\" , type = \"sec_trace\" , ) .. then add the uploaded File to it: sec . add_file ( f ) sec . save ()","title":"Create a Data node"},{"location":"tutorials/synthesis/#associate-a-data-node-with-a-property-node","text":"First, we'll create one more Property node for polystyrene. mw_n = cript . Property ( key = \"mw_n\" , value = 5200 , unit = \"g/mol\" ) Next, we'll add the Data node to the new Property node. mw_n . data = sec Last, we'll add the new Property node to polystyrene and then save it. polystyrene . add_property ( mw_n ) polystyrene . save ()","title":"Associate a Data node with a Property node"},{"location":"tutorials/synthesis/#conclusion","text":"You made it! We hope this tutorial has been helpful. Please let us know how you think it could be improved.","title":"Conclusion"}]}